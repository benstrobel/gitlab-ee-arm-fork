.gems-cache:
  cache:
    key: "gems-cache-${BUILDER_IMAGE_REVISION}${CACHE_KEY_SUFFIX}"
    paths:
      - gems
    policy: pull

.trigger-package-cache:
  cache:
    key: "Ubuntu-20.04-branch-${BUILDER_IMAGE_REVISION}-${CACHE_EDITION}${CACHE_KEY_SUFFIX}"
    paths:
      - cache
      - gems
      - assets_cache
      - node_modules
    policy: pull

.install-gems:
  - gem install bundler:${BUNDLER_VERSION}
  - bundle config set --local path 'gems'
  - bundle config set --local frozen 'true'
  - bundle install -j $(nproc)
  - bundle binstubs --all

.build-package: &build-package
  - bundle exec rake cache:populate
  - bundle exec rake cache:restore
  - bundle exec rake build:project
  - bundle exec rake cache:bundle
  - bundle exec rake build:component_shas

.default_rules:
  rules:
    - if: '$SKIP_JOB_REGEX && $CI_JOB_NAME =~ $SKIP_JOB_REGEX'
      when: never

.skip_release_jobs:
  rules:
    - if: '$SKIP_RELEASE == "true"'
      when: never

.package-artifacts: &package-artifacts
  when: always
  expire_in: 1 day
  paths:
    - pkg/

.package-artifacts-release: &package-artifacts-release
  <<: *package-artifacts
  expire_in: 7 days

.cache-paths:
  - cache
  - gems
  - assets_cache
  - node_modules

.branch-cache: &branch-cache
  key: "${CI_JOB_NAME}-${BUILDER_IMAGE_REVISION}-${CACHE_EDITION}${CACHE_KEY_SUFFIX}"
  paths: !reference [.cache-paths]

.tag-cache: &tag-cache
  # Use the same cache key as branch builds, by manually appending `-branch` substring.
  key: "${CI_JOB_NAME}-branch-${BUILDER_IMAGE_REVISION}-${CACHE_EDITION}${CACHE_KEY_SUFFIX}"
  paths: !reference [.cache-paths]

### For services that need a docker daemon
.docker_job: &docker_job
  image: "${BUILDER_IMAGE_REGISTRY}/ruby_docker:${BUILDER_IMAGE_REVISION}"
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  services:
    - name: docker:20.10.2-dind
      alias: localhost
  tags:
    - gitlab-org-docker

.trigger-job:
  stage: trigger-package
  inherit:
    variables: false
  variables:
    PIPELINE_TYPE: "TRIGGERED_CE_PIPELINE"
    CACHE_EDITION: "CE"
    ALTERNATIVE_SOURCES: 'true'
    BUILDER_IMAGE_REVISION: ${BUILDER_IMAGE_REVISION}
    BUILDER_IMAGE_REGISTRY: ${BUILDER_IMAGE_REGISTRY}
    PUBLIC_BUILDER_IMAGE_REGISTRY: ${PUBLIC_BUILDER_IMAGE_REGISTRY}
    COMPILE_ASSETS: ${COMPILE_ASSETS}
    GITLAB_VERSION: ${GITLAB_VERSION}
    GITLAB_SHELL_VERSION: ${GITLAB_SHELL_VERSION}
    GITLAB_PAGES_VERSION: ${GITLAB_PAGES_VERSION}
    GITALY_VERSION: ${GITALY_SERVER_VERSION}
    GITLAB_ELASTICSEARCH_INDEXER_VERSION: ${GITLAB_ELASTICSEARCH_INDEXER_VERSION}
    GITLAB_KAS_VERSION: ${GITLAB_KAS_VERSION}
    TOP_UPSTREAM_SOURCE_PROJECT: ${TOP_UPSTREAM_SOURCE_PROJECT}
    TOP_UPSTREAM_SOURCE_JOB: ${TOP_UPSTREAM_SOURCE_JOB}
    TOP_UPSTREAM_SOURCE_SHA: ${TOP_UPSTREAM_SOURCE_SHA}
    TOP_UPSTREAM_SOURCE_REF: ${TOP_UPSTREAM_SOURCE_REF}
    QA_BRANCH: ${QA_BRANCH}
  trigger:
    include: '.gitlab-ci.yml'
    strategy: depend
  needs:
    - job: generate-facts
      artifacts: true
  allow_failure: true
  rules:
    # Because of inherit:variables being false, `PIPELINE_TYPE` isn't available here. :(
    # https://gitlab.com/gitlab-org/gitlab/-/issues/368759
    # Do not include in dependency update related pipelines
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^deps/ || $CI_COMMIT_BRANCH =~ /^deps/ || $DEPS_PIPELINE == "true"'
      when: never
    # Do not include in docs pipelines
    - if: '$CI_COMMIT_BRANCH =~ /^docs/ || $CI_COMMIT_BRANCH =~ /-docs$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^docs/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-docs$/'
      when: never
    # Do not include in other housekeeping pipelines
    - if: '$PAGES_UPDATE == "true" || $DEPENDENCY_SCANNING == "true" || $CACHE_UPDATE == "true" || $DURATION_PLOTTER == "true"'
      when: never
    # Do not include in pipelines of protected branches and tags. This job
    # makes sense only during feature development
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    # Do not include in triggered and scheduled pipelines
    - if: '$CI_PIPELINE_SOURCE=="schedule" || $CI_PIPELINE_SOURCE=="pipeline"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_PROJECT_PATH == "gitlab-org/omnibus-gitlab" || $CI_PROJECT_PATH == "gitlab-org/security/omnibus-gitlab")'
      when: manual
    - if: '$CI_COMMIT_BRANCH && ($CI_PIPELINE_SOURCE =~ /(web|push|webide|api)/) && ($CI_PROJECT_PATH == "gitlab-org/omnibus-gitlab" || $CI_PROJECT_PATH == "gitlab-org/security/omnibus-gitlab")'
      when: manual

fetch-assets:
  extends: .docker_job
  stage: prepare
  timeout: 1 hour
  before_script: []
  script:
    - export VERSION=${GITLAB_REF_SLUG-$(ruby -I. -e 'require "lib/gitlab/version"; puts Gitlab::Version.new("gitlab-rails").print')}
    - support/fetch_assets "${VERSION}"
  artifacts:
    paths:
      - ${ASSET_PATH}
  rules:
    - if: '$COMPILE_ASSETS == "true"'
      when: never
    # NOTE (rspeicher): Checking `$AUTO_DEPLOY_COMPILE_ASSETS` as a feature flag
    # See https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/5805
    - if: '$AUTO_DEPLOY_COMPILE_ASSETS && $PIPELINE_TYPE =~ /AUTO_DEPLOY_BUILD_PIPELINE$/'
      when: never
    # Run on all pipelines including a package build (except auto-deploy tag
    # covered above)
    - if: '$PIPELINE_TYPE =~ /_BUILD_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /TRIGGERED_(CE|EE)_PIPELINE/'
    - if: '$PIPELINE_TYPE == "TRIGGER_CACHE_UPDATE_PIPELINE"'
    - if: '$PIPELINE_TYPE == "DURATION_PLOTTER_PIPELINE"'

generate-facts:
  extends: .gems-cache
  stage: prepare
  image: "${BUILDER_IMAGE_REGISTRY}/ruby_docker:${BUILDER_IMAGE_REVISION}"
  script:
    - bundle exec rake build:generate_facts
  artifacts:
    paths:
      - build_facts
    reports:
      dotenv: build_facts/env_vars
  rules:
    - if: '$PIPELINE_TYPE =~ /_BUILD_PIPELINE$/'
    - if: '$PIPELINE_TYPE == "TRIGGER_CACHE_UPDATE_PIPELINE"'
    - if: '$PIPELINE_TYPE == "GITLAB_BRANCH_TEST_PIPELINE"'
    - if: '$PIPELINE_TYPE == "GITLAB_MR_PIPELINE"'
    - if: '$PIPELINE_TYPE =~ /TRIGGERED_(CE|EE)_PIPELINE/'
    - when: never
  needs: []
